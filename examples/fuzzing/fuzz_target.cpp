/*
 * LibFuzzer Target Example
 * 
 * This is a simple fuzzing target that demonstrates:
 * - How to write a LibFuzzer harness
 * - Finding bugs with coverage-guided fuzzing
 * - Detecting crashes with sanitizers
 * 
 * Compile:
 *   clang++ -g -fsanitize=fuzzer,address fuzz_target.cpp -o fuzzer
 * 
 * Run:
 *   ./fuzzer corpus/
 */

#include <stdint.h>
#include <stddef.h>
#include <string.h>

// Vulnerable function that we want to fuzz
bool ProcessInput(const uint8_t *Data, size_t Size) {
    if (Size >= 4) {
        // Check for magic bytes
        if (Data[0] == 'F' &&
            Data[1] == 'U' &&
            Data[2] == 'Z' &&
            Data[3] == 'Z') {
            
            // Bug 1: Buffer overflow if size > 10
            if (Size > 10) {
                char buffer[10];
                // This will overflow!
                memcpy(buffer, Data + 4, Size - 4);
                return true;
            }
            
            // Bug 2: Division by zero
            if (Size > 5 && Data[4] == 0) {
                int x = 100 / Data[4];  // Division by zero!
                return x > 0;
            }
            
            // Bug 3: Null pointer dereference
            if (Size > 6 && Data[5] == 0xFF) {
                int *ptr = nullptr;
                *ptr = 42;  // Crash!
            }
        }
    }
    return false;
}

// LibFuzzer entry point
extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {
    // This function is called for each input generated by the fuzzer
    
    // Filter out empty inputs
    if (Size == 0) {
        return 0;
    }
    
    // Call the function we want to test
    ProcessInput(Data, Size);
    
    // Return 0 (non-zero means input is invalid and should be discarded)
    return 0;
}

/*
 * Expected Results:
 * 
 * The fuzzer should find:
 * 1. Buffer overflow when input starts with "FUZZ" and size > 10
 * 2. Division by zero when input is "FUZZ\x00"
 * 3. Null pointer dereference when input is "FUZZ?\xFF"
 * 
 * Example crashes will be saved to:
 * - crash-<hash>
 * 
 * These can be reproduced with:
 *   ./fuzzer crash-<hash>
 */
